openapi: 3.0.3
info:
  title: Dynamic Knowledge Base API
  description: |
    A RESTful API for a Dynamic Knowledge Base System with version control and hierarchical topics.

    ## Features
    - **Hierarchical Topics**: Organize knowledge in a tree structure
    - **Resource Management**: Attach various types of resources to topics
    - **Version Control**: Track changes and maintain history
    - **User Authentication**: Secure API with role-based access
    - **Memcached Database**: High-performance in-memory storage

    ## Authentication
    Most endpoints require authentication using JWT tokens. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Rate Limiting
    API requests are limited to 100 requests per 15 minutes per IP address.

    ## Database
    This API uses Memcached for high-performance in-memory storage with persistence.
  version: 1.0.0
  contact:
    name: API Support
    email: support@knowledgebase.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.knowledgebase.com
    description: Production server

tags:
  - name: Health
    description: Health check and system status
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Topics
    description: Topic management with version control
  - name: Resources
    description: Resource management for topics
  - name: Admin
    description: Administrative operations

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check the health status of the API and database
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: API is running
                  timestamp:
                    type: string
                    format: date-time
                  status:
                    type: string
                    example: healthy
                  uptime:
                    type: number
                    description: Server uptime in milliseconds
                  memory:
                    type: object
                    properties:
                      rss:
                        type: number
                        description: Resident Set Size in MB
                      heapTotal:
                        type: number
                        description: Total heap size in MB
                      heapUsed:
                        type: number
                        description: Used heap size in MB
                      external:
                        type: number
                        description: External memory in MB
                  system:
                    type: object
                    properties:
                      denoVersion:
                        type: string
                      platform:
                        type: string
                      arch:
                        type: string
                      cwd:
                        type: string
                  database:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [healthy, unhealthy]
                      details:
                        type: string
        '500':
          description: Health check failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users:
    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  minLength: 6
                  example: password123
                role:
                  $ref: '#/components/schemas/UserRole'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users (requires authentication)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: JWT authentication token
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                email:
                  type: string
                  format: email
                role:
                  $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/role/{role}:
    get:
      tags:
        - Users
      summary: Get users by role
      description: Retrieve all users with a specific role (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: role
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserRole'
          description: User role
      responses:
        '200':
          description: List of users with specified role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/topics:
    post:
      tags:
        - Topics
      summary: Create topic
      description: Create a new topic (requires authentication)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - content
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 200
                  example: JavaScript Fundamentals
                content:
                  type: string
                  minLength: 1
                  example: JavaScript is a programming language...
                parentTopicId:
                  type: string
                  description: ID of parent topic (optional)
                  example: topic-123
      responses:
        '201':
          description: Topic created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Topic'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Topics
      summary: Get all topics
      description: Retrieve all topics (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: parentTopicId
          in: query
          schema:
            type: string
          description: Filter by parent topic ID
        - name: search
          in: query
          schema:
            type: string
          description: Search term for topic name or content
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: List of topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/topics/{id}:
    get:
      tags:
        - Topics
      summary: Get topic by ID
      description: Retrieve a specific topic by ID (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Topic ID
      responses:
        '200':
          description: Topic details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Topic'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Topics
      summary: Update topic
      description: Update topic information (creates new version) (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Topic ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 200
                content:
                  type: string
                  minLength: 1
                parentTopicId:
                  type: string
                  description: ID of parent topic
      responses:
        '200':
          description: Topic updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Topic'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Topics
      summary: Delete topic
      description: Delete a topic (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Topic ID
      responses:
        '200':
          description: Topic deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/topics/{id}/tree:
    get:
      tags:
        - Topics
      summary: Get topic tree
      description: Get topic and all its subtopics recursively (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Topic ID
      responses:
        '200':
          description: Topic tree structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/TopicTree'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/topics/{id}/versions:
    get:
      tags:
        - Topics
      summary: Get topic versions
      description: Get all versions of a topic (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Topic ID
      responses:
        '200':
          description: List of topic versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TopicVersion'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/topics/{id}/versions/{version}:
    get:
      tags:
        - Topics
      summary: Get specific topic version
      description: Get a specific version of a topic (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Topic ID
        - name: version
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Version number
      responses:
        '200':
          description: Topic version details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/TopicVersion'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Topic or version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/topics/search:
    get:
      tags:
        - Topics
      summary: Search topics
      description: Search topics by name or content (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/topics/path/{from}/{to}:
    get:
      tags:
        - Topics
      summary: Find shortest path
      description: Find shortest path between two topics (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: path
          required: true
          schema:
            type: string
          description: Source topic ID
        - name: to
          in: path
          required: true
          schema:
            type: string
          description: Destination topic ID
      responses:
        '200':
          description: Shortest path information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/ShortestPathResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: One or both topics not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/resources:
    post:
      tags:
        - Resources
      summary: Create resource
      description: Create a new resource for a topic (requires authentication)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - topicId
                - url
                - description
                - type
              properties:
                topicId:
                  type: string
                  description: ID of the topic this resource belongs to
                  example: topic-123
                url:
                  type: string
                  format: uri
                  example: https://example.com/article
                description:
                  type: string
                  minLength: 1
                  maxLength: 500
                  example: A comprehensive guide to JavaScript
                type:
                  $ref: '#/components/schemas/ResourceType'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Resources
      summary: Get all resources
      description: Retrieve all resources (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: topicId
          in: query
          schema:
            type: string
          description: Filter by topic ID
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/ResourceType'
          description: Filter by resource type
        - name: search
          in: query
          schema:
            type: string
          description: Search term for resource description or URL
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/resources/{id}:
    get:
      tags:
        - Resources
      summary: Get resource by ID
      description: Retrieve a specific resource by ID (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Resource ID
      responses:
        '200':
          description: Resource details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Resources
      summary: Update resource
      description: Update resource information (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Resource ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                description:
                  type: string
                  minLength: 1
                  maxLength: 500
                type:
                  $ref: '#/components/schemas/ResourceType'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Resources
      summary: Delete resource
      description: Delete a resource (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Resource ID
      responses:
        '200':
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/resources/search:
    get:
      tags:
        - Resources
      summary: Search resources
      description: Search resources by description or URL (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/admin/users:
    get:
      tags:
        - Admin
      summary: Get all users (Admin only)
      description: Retrieve all users (requires admin authentication)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    BaseEntity:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: user-123
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - createdAt
        - updatedAt

    User:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 100
              example: John Doe
            email:
              type: string
              format: email
              example: john@example.com
            role:
              $ref: '#/components/schemas/UserRole'
          required:
            - name
            - email
            - role

    UserRole:
      type: string
      enum:
        - Admin
        - Editor
        - Viewer
      description: User role in the system

    Topic:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 200
              example: JavaScript Fundamentals
            content:
              type: string
              minLength: 1
              example: JavaScript is a programming language...
            version:
              type: integer
              minimum: 1
              description: Current version number
              example: 1
            parentTopicId:
              type: string
              nullable: true
              description: ID of parent topic (null for root topics)
              example: topic-123
          required:
            - name
            - content
            - version

    TopicVersion:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            topicId:
              type: string
              description: ID of the topic this version belongs to
              example: topic-123
            name:
              type: string
              minLength: 1
              maxLength: 200
              example: JavaScript Fundamentals
            content:
              type: string
              minLength: 1
              example: JavaScript is a programming language...
            version:
              type: integer
              minimum: 1
              description: Version number
              example: 1
            parentTopicId:
              type: string
              nullable: true
              description: ID of parent topic
              example: topic-123
          required:
            - topicId
            - name
            - content
            - version

    TopicTree:
      allOf:
        - $ref: '#/components/schemas/Topic'
        - type: object
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/TopicTree'
              description: Child topics in the tree structure

    Resource:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            topicId:
              type: string
              description: ID of the topic this resource belongs to
              example: topic-123
            url:
              type: string
              format: uri
              example: https://example.com/article
            description:
              type: string
              minLength: 1
              maxLength: 500
              example: A comprehensive guide to JavaScript
            type:
              $ref: '#/components/schemas/ResourceType'
          required:
            - topicId
            - url
            - description
            - type

    ResourceType:
      type: string
      enum:
        - video
        - article
        - pdf
        - link
      description: Type of resource

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        limit:
          type: integer
          minimum: 1
          description: Number of items per page
          example: 20
        total:
          type: integer
          minimum: 0
          description: Total number of items
          example: 100
        pages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 5
        hasNext:
          type: boolean
          description: Whether there is a next page
          example: true
        hasPrev:
          type: boolean
          description: Whether there is a previous page
          example: false

    ShortestPathResult:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
          description: Array of topic IDs representing the path
          example: ["topic-1", "topic-2", "topic-3"]
        distance:
          type: integer
          minimum: 0
          description: Number of steps in the path
          example: 2
        exists:
          type: boolean
          description: Whether a path exists between the topics
          example: true
      required:
        - path
        - distance
        - exists

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          description: Response data (varies by endpoint)
        message:
          type: string
          description: Success message
          example: Operation completed successfully
      required:
        - success

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
          example: Resource not found
        message:
          type: string
          description: Additional error details
      required:
        - success
        - error

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: Unauthorized
            message: Access token is missing or invalid

    ForbiddenError:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: Forbidden
            message: Admin access required

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: Not Found
            message: The requested resource was not found

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: Validation Error
            message: Invalid input data

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: Too Many Requests
            message: Rate limit exceeded. Please try again later.

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: Internal Server Error
            message: An unexpected error occurred
